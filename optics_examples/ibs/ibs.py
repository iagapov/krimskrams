#autogenerated on 2016/05/18 17:10:48
from ocelot import *
from ocelot.gui.accelerator import *
from pylab import *

from h7ba import *
#cant.angle = 0.001
#qf1a.k1 = 4.57619023825
#qd2a.k1 = -4.14968525488
#qd3a.k1 = -3.9472378848
#qf4a.k1 =  3.43589674456
lat = MagneticLattice( undcell )

#from t6ba import *
#from cellB import *


from scipy.integrate import simps


tws=twiss(lat, Twiss(), nPoints=1000)
plot_opt_func(lat, tws, legend = False)

def g(x):
    if x<0.25: return -4.336*log(x)
    if x<0.8:  return 1./(x + 0.11)**1.6 + 1.2
    return 2./x**(1.2) - 0.3

#x = np.linspace(0.01,6,100)
#plt.plot(x, [g(i) for i in x] )
#plt.show()


beam = Beam()
beam.E = 6.0
beam.sigma_E = 1.0e-3
beam.emit_x = 1.0e-11  # m
beam.tlen = 0.001 # in m
beam.N = 1.e10

def ibs(tws, beam):

    sigp = beam.sigma_E
    ex = beam.emit_x  # m
    gam = beam.E * 1000./ 0.511
    sigs = beam.tlen # m
    N = beam.N
    L = tws[-1].s

    b0 = 10.0 # average beta function -- for Coulomb log

    s = np.array([t.s for t in tws])
    betx = np.array([t.beta_x for t in tws])
    bety = np.array([t.beta_y for t in tws])
    H = np.array([(1. + t.alpha_x**2)/ t.beta_x * t.Dx**2 + t.beta_x*t.Dxp**2 + 2*t.alpha_x*t.Dx*t.Dxp  for t in tws])

    y2 = 1. /sqrt( (1./sigp)**2 + H/ex)
    y3 = 1./sqrt(H/ex)
    y4 = 1./sqrt( (1./sigp)**2  + 0.1*H/ex )

    sigh = y2

    a = sigh / gam * sqrt(betx/ex)
    b = sigh / gam * sqrt(bety/ex)


    g1 = [g(i) for i in b/a]
    g2 = [g(i) for i in a/b]


    #longitudinal
    Fe = sigh**2/sigp**2 * (g1/a + g2/b)
    #horizontal
    Fx = -a*g1 + H * sigh**2 / ex * (g1/a + g2/b)

    r0 = 2.8179403e-15
    r02c = 23.805e-22


    A = (r02c * N ) / (64.0 * pi**2 * gam**4 * ex*ex*sigp*sigs)
    LG = log( (gam**2 * ex * sqrt(b0 * ex)) / (r0 * b0) )

    Tem = 2. * pi**(3./2.)* LG * A * simps(Fe,s) / L
    Thm = 2. * pi**(3./2.)* LG * A * simps(Fx,s) / L


    #ax = plt.figure().add_subplot(111)
    #p1,=ax.plot(s,y2, 'b-')
    #p2,=ax.plot(s,y3, 'g-')
    #p3,=ax.plot(s,y4, 'r-')
    #ax.legend([p1,p2,p3],['sigh','sigh dp neglect','H /10'])
    #ax2 = ax.twinx()
    #ax2.plot(s,1./H, 'b--')

    print('IBS rise times (x, E) [msec]:{} {}'.format(1000./Thm, 1000./Tem))
    print('IBS rise rates [1/sec]:{} {}'.format(Thm, Tem))

    ibsInfo = type('ibsInfo', (), {})
    ibsInfo.Fe = Fe
    ibsInfo.Fx = Fx
    ibsInfo.Thm = Thm
    ibsInfo.Tem = Tem

    ibsInfo.sigh = sigh
    ibsInfo.a = a
    ibsInfo.b = b
    ibsInfo.g1 = g1
    ibsInfo.g2 = g2
    ibsInfo.tws = tws
    ibsInfo.s = s
    ibsInfo.H = H


    return ibsInfo

    plt.show()



r=ibs(tws, beam)
'''
ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.a,'r-')
p2,=ax.plot(r.s,r.b,'g-')
ax.legend([p1,p2],['a','b'])

ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.a/r.b, 'r-')
p2,=ax.plot(r.s,r.b/r.a, 'g-')
ax.legend([p1,p2],['a/b','b/a'])

ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.g1, 'r-')
p2,=ax.plot(r.s,r.g2, 'g-')
ax.legend([p1,p2],['g1','g2'])

ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.g1/r.a, 'r-')
p2,=ax.plot(r.s,r.g2/r.b, 'g-')
ax.legend([p1,p2],['g1/a','g2/b'])
'''

ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.Fe, 'r-')
ax.legend([p1],['<1/Ie>'])

Fi = [simps(r.Fe[0:i], r.s[0:i]) for i in range(1,len(r.s))]
ax2 = ax.twinx()
ax2.plot(r.s[1:],Fi,'b-',lw=2)

ax = plt.figure().add_subplot(111)
p1,=ax.plot(r.s,r.Fx, 'r-')
ax.legend([p1],['<1/Ix>'])

Fi = [simps(r.Fx[0:i], r.s[0:i]) for i in range(1,len(r.s))]
ax2 = ax.twinx()
ax2.plot(r.s[1:],Fi,'b-',lw=2)


Tx = []
Te = []

for dp in linspace(5.e-4, 2.e-3,10):
    beam.sigma_E = dp
    r=ibs(tws, beam)
    Tx.append(r.Thm)
    Te.append(r.Tem)

ax = plt.figure().add_subplot(111)
p1, = ax.plot(linspace(1.e-4, 2.e-3,10)*1000, Tx,'r-', lw=3)
p2, = ax.plot(linspace(1.e-4, 2.e-3,10)*1000, Te,'g-', lw=3)
ax.legend([p1,p2],['1/Tx [1/s]','1/Te [1/s]'])
ax.set_xlabel('dp, ppm')

plt.show()
